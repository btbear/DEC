// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package eth

import (
	"math/big"

	"github.com/DEWH/go-DEWH/common"
	"github.com/DEWH/go-DEWH/common/hexutil"
	"github.com/DEWH/go-DEWH/consensus/ethash"
	"github.com/DEWH/go-DEWH/core"
	"github.com/DEWH/go-DEWH/eth/downloader"
	"github.com/DEWH/go-DEWH/eth/gasprice"
)

var _ = (*configMarshaling)(nil)

func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Genesis                 *core.Genesis `toml:",omitempty"`
		NetworkId               uint64
		SyncMode                downloader.SyncMode
		LightServ               int  `toml:",omitempty"`
		LightPeers              int  `toml:",omitempty"`
		SkipBcVersionCheck      bool `toml:"-"`
		DatabaseHandles         int  `toml:"-"`
		DatabaseCache           int
		Etherbase               common.Address `toml:",omitempty"`
		MinerThreads            int            `toml:",omitempty"`
		ExtraData               hexutil.Bytes  `toml:",omitempty"`
		GasPrice                *big.Int
		Ethash                  ethash.Config
		TxPool                  core.TxPoolConfig
		GPO                     gasprice.Config
		EnablePreimageRecording bool
		DocRoot                 string `toml:"-"`
	}
	var enc Config
	enc.Genesis = c.Genesis
	enc.NetworkId = c.NetworkId
	enc.SyncMode = c.SyncMode
	enc.LightServ = c.LightServ
	enc.LightPeers = c.LightPeers
	enc.SkipBcVersionCheck = c.SkipBcVersionCheck
	enc.DatabaseHandles = c.DatabaseHandles
	enc.DatabaseCache = c.DatabaseCache
	enc.Etherbase = c.Etherbase
	enc.MinerThreads = c.MinerThreads
	enc.ExtraData = c.ExtraData
	enc.GasPrice = c.GasPrice
	enc.Ethash = c.Ethash
	enc.TxPool = c.TxPool
	enc.GPO = c.GPO
	enc.EnablePreimageRecording = c.EnablePreimageRecording
	enc.DocRoot = c.DocRoot
	return &enc, nil
}

func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Genesis                 *core.Genesis `toml:",omitempty"`
		NetworkId               *uint64
		SyncMode                *downloader.SyncMode
		LightServ               *int  `toml:",omitempty"`
		LightPeers              *int  `toml:",omitempty"`
		SkipBcVersionCheck      *bool `toml:"-"`
		DatabaseHandles         *int  `toml:"-"`
		DatabaseCache           *int
		Etherbase               *common.Address `toml:",omitempty"`
		MinerThreads            *int            `toml:",omitempty"`
		ExtraData               *hexutil.Bytes  `toml:",omitempty"`
		GasPrice                *big.Int
		Ethash                  *ethash.Config
		TxPool                  *core.TxPoolConfig
		GPO                     *gasprice.Config
		EnablePreimageRecording *bool
		DocRoot                 *string `toml:"-"`
	}
	var DEWH Config
	if err := unmarshal(&DEWH); err != nil {
		return err
	}
	if DEWH.Genesis != nil {
		c.Genesis = DEWH.Genesis
	}
	if DEWH.NetworkId != nil {
		c.NetworkId = *DEWH.NetworkId
	}
	if DEWH.SyncMode != nil {
		c.SyncMode = *DEWH.SyncMode
	}
	if DEWH.LightServ != nil {
		c.LightServ = *DEWH.LightServ
	}
	if DEWH.LightPeers != nil {
		c.LightPeers = *DEWH.LightPeers
	}
	if DEWH.SkipBcVersionCheck != nil {
		c.SkipBcVersionCheck = *DEWH.SkipBcVersionCheck
	}
	if DEWH.DatabaseHandles != nil {
		c.DatabaseHandles = *DEWH.DatabaseHandles
	}
	if DEWH.DatabaseCache != nil {
		c.DatabaseCache = *DEWH.DatabaseCache
	}
	if DEWH.Etherbase != nil {
		c.Etherbase = *DEWH.Etherbase
	}
	if DEWH.MinerThreads != nil {
		c.MinerThreads = *DEWH.MinerThreads
	}
	if DEWH.ExtraData != nil {
		c.ExtraData = *DEWH.ExtraData
	}
	if DEWH.GasPrice != nil {
		c.GasPrice = DEWH.GasPrice
	}
	if DEWH.Ethash != nil {
		c.Ethash = *DEWH.Ethash
	}
	if DEWH.TxPool != nil {
		c.TxPool = *DEWH.TxPool
	}
	if DEWH.GPO != nil {
		c.GPO = *DEWH.GPO
	}
	if DEWH.EnablePreimageRecording != nil {
		c.EnablePreimageRecording = *DEWH.EnablePreimageRecording
	}
	if DEWH.DocRoot != nil {
		c.DocRoot = *DEWH.DocRoot
	}
	return nil
}
