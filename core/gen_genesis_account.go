// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package core

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/DEWH/go-DEWH/common"
	"github.com/DEWH/go-DEWH/common/hexutil"
	"github.com/DEWH/go-DEWH/common/math"
)

var _ = (*genesisAccountMarshaling)(nil)

func (g GenesisAccount) MarshalJSON() ([]byte, error) {
	type GenesisAccount struct {
		Code       hexutil.Bytes               `json:"code,omitempty"`
		Storage    map[storageJSON]storageJSON `json:"storage,omitempty"`
		Balance    *math.HexOrDEWHimal256       `json:"balance" gencoDEWH:"required"`
		Nonce      math.HexOrDEWHimal64         `json:"nonce,omitempty"`
		PrivateKey hexutil.Bytes               `json:"secretKey,omitempty"`
	}
	var enc GenesisAccount
	enc.Code = g.Code
	if g.Storage != nil {
		enc.Storage = make(map[storageJSON]storageJSON, len(g.Storage))
		for k, v := range g.Storage {
			enc.Storage[storageJSON(k)] = storageJSON(v)
		}
	}
	enc.Balance = (*math.HexOrDEWHimal256)(g.Balance)
	enc.Nonce = math.HexOrDEWHimal64(g.Nonce)
	enc.PrivateKey = g.PrivateKey
	return json.Marshal(&enc)
}

func (g *GenesisAccount) UnmarshalJSON(input []byte) error {
	type GenesisAccount struct {
		Code       *hexutil.Bytes              `json:"code,omitempty"`
		Storage    map[storageJSON]storageJSON `json:"storage,omitempty"`
		Balance    *math.HexOrDEWHimal256       `json:"balance" gencoDEWH:"required"`
		Nonce      *math.HexOrDEWHimal64        `json:"nonce,omitempty"`
		PrivateKey *hexutil.Bytes              `json:"secretKey,omitempty"`
	}
	var DEWH GenesisAccount
	if err := json.Unmarshal(input, &DEWH); err != nil {
		return err
	}
	if DEWH.Code != nil {
		g.Code = *DEWH.Code
	}
	if DEWH.Storage != nil {
		g.Storage = make(map[common.Hash]common.Hash, len(DEWH.Storage))
		for k, v := range DEWH.Storage {
			g.Storage[common.Hash(k)] = common.Hash(v)
		}
	}
	if DEWH.Balance == nil {
		return errors.New("missing required field 'balance' for GenesisAccount")
	}
	g.Balance = (*big.Int)(DEWH.Balance)
	if DEWH.Nonce != nil {
		g.Nonce = uint64(*DEWH.Nonce)
	}
	if DEWH.PrivateKey != nil {
		g.PrivateKey = *DEWH.PrivateKey
	}
	return nil
}
