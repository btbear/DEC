// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package vm

import (
	"encoding/json"
	"math/big"

	"github.com/DEWH/go-DEWH/common"
	"github.com/DEWH/go-DEWH/common/hexutil"
	"github.com/DEWH/go-DEWH/common/math"
)

var _ = (*structLogMarshaling)(nil)

func (s StructLog) MarshalJSON() ([]byte, error) {
	type StructLog struct {
		Pc          uint64                      `json:"pc"`
		Op          OpCode                      `json:"op"`
		Gas         math.HexOrDEWHimal64         `json:"gas"`
		GasCost     math.HexOrDEWHimal64         `json:"gasCost"`
		Memory      hexutil.Bytes               `json:"memory"`
		MemorySize  int                         `json:"memSize"`
		Stack       []*math.HexOrDEWHimal256     `json:"stack"`
		Storage     map[common.Hash]common.Hash `json:"-"`
		Depth       int                         `json:"depth"`
		Err         error                       `json:"-"`
		OpName      string                      `json:"opName"`
		ErrorString string                      `json:"error"`
	}
	var enc StructLog
	enc.Pc = s.Pc
	enc.Op = s.Op
	enc.Gas = math.HexOrDEWHimal64(s.Gas)
	enc.GasCost = math.HexOrDEWHimal64(s.GasCost)
	enc.Memory = s.Memory
	enc.MemorySize = s.MemorySize
	if s.Stack != nil {
		enc.Stack = make([]*math.HexOrDEWHimal256, len(s.Stack))
		for k, v := range s.Stack {
			enc.Stack[k] = (*math.HexOrDEWHimal256)(v)
		}
	}
	enc.Storage = s.Storage
	enc.Depth = s.Depth
	enc.Err = s.Err
	enc.OpName = s.OpName()
	enc.ErrorString = s.ErrorString()
	return json.Marshal(&enc)
}

func (s *StructLog) UnmarshalJSON(input []byte) error {
	type StructLog struct {
		Pc         *uint64                     `json:"pc"`
		Op         *OpCode                     `json:"op"`
		Gas        *math.HexOrDEWHimal64        `json:"gas"`
		GasCost    *math.HexOrDEWHimal64        `json:"gasCost"`
		Memory     *hexutil.Bytes              `json:"memory"`
		MemorySize *int                        `json:"memSize"`
		Stack      []*math.HexOrDEWHimal256     `json:"stack"`
		Storage    map[common.Hash]common.Hash `json:"-"`
		Depth      *int                        `json:"depth"`
		Err        error                       `json:"-"`
	}
	var DEWH StructLog
	if err := json.Unmarshal(input, &DEWH); err != nil {
		return err
	}
	if DEWH.Pc != nil {
		s.Pc = *DEWH.Pc
	}
	if DEWH.Op != nil {
		s.Op = *DEWH.Op
	}
	if DEWH.Gas != nil {
		s.Gas = uint64(*DEWH.Gas)
	}
	if DEWH.GasCost != nil {
		s.GasCost = uint64(*DEWH.GasCost)
	}
	if DEWH.Memory != nil {
		s.Memory = *DEWH.Memory
	}
	if DEWH.MemorySize != nil {
		s.MemorySize = *DEWH.MemorySize
	}
	if DEWH.Stack != nil {
		s.Stack = make([]*big.Int, len(DEWH.Stack))
		for k, v := range DEWH.Stack {
			s.Stack[k] = (*big.Int)(v)
		}
	}
	if DEWH.Storage != nil {
		s.Storage = DEWH.Storage
	}
	if DEWH.Depth != nil {
		s.Depth = *DEWH.Depth
	}
	if DEWH.Err != nil {
		s.Err = DEWH.Err
	}
	return nil
}
