// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/DEWH/go-DEWH/common"
	"github.com/DEWH/go-DEWH/common/hexutil"
)

var _ = (*txdataMarshaling)(nil)

func (t txdata) MarshalJSON() ([]byte, error) {
	type txdata struct {
		AccountNonce hexutil.Uint64  `json:"nonce"    gencoDEWH:"required"`
		Price        *hexutil.Big    `json:"gasPrice" gencoDEWH:"required"`
		GasLimit     hexutil.Uint64  `json:"gas"      gencoDEWH:"required"`
		Recipient    *common.Address `json:"to"       rlp:"nil"`
		Amount       *hexutil.Big    `json:"value"    gencoDEWH:"required"`
		Payload      hexutil.Bytes   `json:"input"    gencoDEWH:"required"`
		V            *hexutil.Big    `json:"v" gencoDEWH:"required"`
		R            *hexutil.Big    `json:"r" gencoDEWH:"required"`
		S            *hexutil.Big    `json:"s" gencoDEWH:"required"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
	}
	var enc txdata
	enc.AccountNonce = hexutil.Uint64(t.AccountNonce)
	enc.Price = (*hexutil.Big)(t.Price)
	enc.GasLimit = hexutil.Uint64(t.GasLimit)
	enc.Recipient = t.Recipient
	enc.Amount = (*hexutil.Big)(t.Amount)
	enc.Payload = t.Payload
	enc.V = (*hexutil.Big)(t.V)
	enc.R = (*hexutil.Big)(t.R)
	enc.S = (*hexutil.Big)(t.S)
	enc.Hash = t.Hash
	return json.Marshal(&enc)
}

func (t *txdata) UnmarshalJSON(input []byte) error {
	type txdata struct {
		AccountNonce *hexutil.Uint64 `json:"nonce"    gencoDEWH:"required"`
		Price        *hexutil.Big    `json:"gasPrice" gencoDEWH:"required"`
		GasLimit     *hexutil.Uint64 `json:"gas"      gencoDEWH:"required"`
		Recipient    *common.Address `json:"to"       rlp:"nil"`
		Amount       *hexutil.Big    `json:"value"    gencoDEWH:"required"`
		Payload      *hexutil.Bytes  `json:"input"    gencoDEWH:"required"`
		V            *hexutil.Big    `json:"v" gencoDEWH:"required"`
		R            *hexutil.Big    `json:"r" gencoDEWH:"required"`
		S            *hexutil.Big    `json:"s" gencoDEWH:"required"`
		Hash         *common.Hash    `json:"hash" rlp:"-"`
	}
	var DEWH txdata
	if err := json.Unmarshal(input, &DEWH); err != nil {
		return err
	}
	if DEWH.AccountNonce == nil {
		return errors.New("missing required field 'nonce' for txdata")
	}
	t.AccountNonce = uint64(*DEWH.AccountNonce)
	if DEWH.Price == nil {
		return errors.New("missing required field 'gasPrice' for txdata")
	}
	t.Price = (*big.Int)(DEWH.Price)
	if DEWH.GasLimit == nil {
		return errors.New("missing required field 'gas' for txdata")
	}
	t.GasLimit = uint64(*DEWH.GasLimit)
	if DEWH.Recipient != nil {
		t.Recipient = DEWH.Recipient
	}
	if DEWH.Amount == nil {
		return errors.New("missing required field 'value' for txdata")
	}
	t.Amount = (*big.Int)(DEWH.Amount)
	if DEWH.Payload == nil {
		return errors.New("missing required field 'input' for txdata")
	}
	t.Payload = *DEWH.Payload
	if DEWH.V == nil {
		return errors.New("missing required field 'v' for txdata")
	}
	t.V = (*big.Int)(DEWH.V)
	if DEWH.R == nil {
		return errors.New("missing required field 'r' for txdata")
	}
	t.R = (*big.Int)(DEWH.R)
	if DEWH.S == nil {
		return errors.New("missing required field 's' for txdata")
	}
	t.S = (*big.Int)(DEWH.S)
	if DEWH.Hash != nil {
		t.Hash = DEWH.Hash
	}
	return nil
}
