// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/DEWH/go-DEWH/common"
	"github.com/DEWH/go-DEWH/common/hexutil"
)

var _ = (*receiptMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r Receipt) MarshalJSON() ([]byte, error) {
	type Receipt struct {
		PostState         hexutil.Bytes  `json:"root"`
		Status            hexutil.Uint64 `json:"status"`
		CumulativeGasUsed hexutil.Uint64 `json:"cumulativeGasUsed" gencoDEWH:"required"`
		Bloom             Bloom          `json:"logsBloom"         gencoDEWH:"required"`
		Logs              []*Log         `json:"logs"              gencoDEWH:"required"`
		TxHash            common.Hash    `json:"transactionHash" gencoDEWH:"required"`
		ContractAddress   common.Address `json:"contractAddress"`
		GasUsed           hexutil.Uint64 `json:"gasUsed" gencoDEWH:"required"`
	}
	var enc Receipt
	enc.PostState = r.PostState
	enc.Status = hexutil.Uint64(r.Status)
	enc.CumulativeGasUsed = hexutil.Uint64(r.CumulativeGasUsed)
	enc.Bloom = r.Bloom
	enc.Logs = r.Logs
	enc.TxHash = r.TxHash
	enc.ContractAddress = r.ContractAddress
	enc.GasUsed = hexutil.Uint64(r.GasUsed)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *Receipt) UnmarshalJSON(input []byte) error {
	type Receipt struct {
		PostState         *hexutil.Bytes  `json:"root"`
		Status            *hexutil.Uint64 `json:"status"`
		CumulativeGasUsed *hexutil.Uint64 `json:"cumulativeGasUsed" gencoDEWH:"required"`
		Bloom             *Bloom          `json:"logsBloom"         gencoDEWH:"required"`
		Logs              []*Log          `json:"logs"              gencoDEWH:"required"`
		TxHash            *common.Hash    `json:"transactionHash" gencoDEWH:"required"`
		ContractAddress   *common.Address `json:"contractAddress"`
		GasUsed           *hexutil.Uint64 `json:"gasUsed" gencoDEWH:"required"`
	}
	var DEWH Receipt
	if err := json.Unmarshal(input, &DEWH); err != nil {
		return err
	}
	if DEWH.PostState != nil {
		r.PostState = *DEWH.PostState
	}
	if DEWH.Status != nil {
		r.Status = uint64(*DEWH.Status)
	}
	if DEWH.CumulativeGasUsed == nil {
		return errors.New("missing required field 'cumulativeGasUsed' for Receipt")
	}
	r.CumulativeGasUsed = uint64(*DEWH.CumulativeGasUsed)
	if DEWH.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Receipt")
	}
	r.Bloom = *DEWH.Bloom
	if DEWH.Logs == nil {
		return errors.New("missing required field 'logs' for Receipt")
	}
	r.Logs = DEWH.Logs
	if DEWH.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for Receipt")
	}
	r.TxHash = *DEWH.TxHash
	if DEWH.ContractAddress != nil {
		r.ContractAddress = *DEWH.ContractAddress
	}
	if DEWH.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for Receipt")
	}
	r.GasUsed = uint64(*DEWH.GasUsed)
	return nil
}
