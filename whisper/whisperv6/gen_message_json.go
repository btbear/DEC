// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package whisperv6

import (
	"encoding/json"

	"github.com/DEWH/go-DEWH/common/hexutil"
)

var _ = (*messageOverride)(nil)

// MarshalJSON marshals type Message to a json string
func (m Message) MarshalJSON() ([]byte, error) {
	type Message struct {
		Sig       hexutil.Bytes `json:"sig,omitempty"`
		TTL       uint32        `json:"ttl"`
		Timestamp uint32        `json:"timestamp"`
		Topic     TopicType     `json:"topic"`
		Payload   hexutil.Bytes `json:"payload"`
		Padding   hexutil.Bytes `json:"padding"`
		PoW       float64       `json:"pow"`
		Hash      hexutil.Bytes `json:"hash"`
		Dst       hexutil.Bytes `json:"recipientPublicKey,omitempty"`
	}
	var enc Message
	enc.Sig = m.Sig
	enc.TTL = m.TTL
	enc.Timestamp = m.Timestamp
	enc.Topic = m.Topic
	enc.Payload = m.Payload
	enc.Padding = m.Padding
	enc.PoW = m.PoW
	enc.Hash = m.Hash
	enc.Dst = m.Dst
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals type Message to a json string
func (m *Message) UnmarshalJSON(input []byte) error {
	type Message struct {
		Sig       *hexutil.Bytes `json:"sig,omitempty"`
		TTL       *uint32        `json:"ttl"`
		Timestamp *uint32        `json:"timestamp"`
		Topic     *TopicType     `json:"topic"`
		Payload   *hexutil.Bytes `json:"payload"`
		Padding   *hexutil.Bytes `json:"padding"`
		PoW       *float64       `json:"pow"`
		Hash      *hexutil.Bytes `json:"hash"`
		Dst       *hexutil.Bytes `json:"recipientPublicKey,omitempty"`
	}
	var DEWH Message
	if err := json.Unmarshal(input, &DEWH); err != nil {
		return err
	}
	if DEWH.Sig != nil {
		m.Sig = *DEWH.Sig
	}
	if DEWH.TTL != nil {
		m.TTL = *DEWH.TTL
	}
	if DEWH.Timestamp != nil {
		m.Timestamp = *DEWH.Timestamp
	}
	if DEWH.Topic != nil {
		m.Topic = *DEWH.Topic
	}
	if DEWH.Payload != nil {
		m.Payload = *DEWH.Payload
	}
	if DEWH.Padding != nil {
		m.Padding = *DEWH.Padding
	}
	if DEWH.PoW != nil {
		m.PoW = *DEWH.PoW
	}
	if DEWH.Hash != nil {
		m.Hash = *DEWH.Hash
	}
	if DEWH.Dst != nil {
		m.Dst = *DEWH.Dst
	}
	return nil
}
