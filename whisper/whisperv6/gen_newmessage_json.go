// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package whisperv6

import (
	"encoding/json"

	"github.com/DEWH/go-DEWH/common/hexutil"
)

var _ = (*newMessageOverride)(nil)

// MarshalJSON marshals type NewMessage to a json string
func (n NewMessage) MarshalJSON() ([]byte, error) {
	type NewMessage struct {
		SymKeyID   string        `json:"symKeyID"`
		PublicKey  hexutil.Bytes `json:"pubKey"`
		Sig        string        `json:"sig"`
		TTL        uint32        `json:"ttl"`
		Topic      TopicType     `json:"topic"`
		Payload    hexutil.Bytes `json:"payload"`
		Padding    hexutil.Bytes `json:"padding"`
		PowTime    uint32        `json:"powTime"`
		PowTarget  float64       `json:"powTarget"`
		TargetPeer string        `json:"targetPeer"`
	}
	var enc NewMessage
	enc.SymKeyID = n.SymKeyID
	enc.PublicKey = n.PublicKey
	enc.Sig = n.Sig
	enc.TTL = n.TTL
	enc.Topic = n.Topic
	enc.Payload = n.Payload
	enc.Padding = n.Padding
	enc.PowTime = n.PowTime
	enc.PowTarget = n.PowTarget
	enc.TargetPeer = n.TargetPeer
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals type NewMessage to a json string
func (n *NewMessage) UnmarshalJSON(input []byte) error {
	type NewMessage struct {
		SymKeyID   *string        `json:"symKeyID"`
		PublicKey  *hexutil.Bytes `json:"pubKey"`
		Sig        *string        `json:"sig"`
		TTL        *uint32        `json:"ttl"`
		Topic      *TopicType     `json:"topic"`
		Payload    *hexutil.Bytes `json:"payload"`
		Padding    *hexutil.Bytes `json:"padding"`
		PowTime    *uint32        `json:"powTime"`
		PowTarget  *float64       `json:"powTarget"`
		TargetPeer *string        `json:"targetPeer"`
	}
	var DEWH NewMessage
	if err := json.Unmarshal(input, &DEWH); err != nil {
		return err
	}
	if DEWH.SymKeyID != nil {
		n.SymKeyID = *DEWH.SymKeyID
	}
	if DEWH.PublicKey != nil {
		n.PublicKey = *DEWH.PublicKey
	}
	if DEWH.Sig != nil {
		n.Sig = *DEWH.Sig
	}
	if DEWH.TTL != nil {
		n.TTL = *DEWH.TTL
	}
	if DEWH.Topic != nil {
		n.Topic = *DEWH.Topic
	}
	if DEWH.Payload != nil {
		n.Payload = *DEWH.Payload
	}
	if DEWH.Padding != nil {
		n.Padding = *DEWH.Padding
	}
	if DEWH.PowTime != nil {
		n.PowTime = *DEWH.PowTime
	}
	if DEWH.PowTarget != nil {
		n.PowTarget = *DEWH.PowTarget
	}
	if DEWH.TargetPeer != nil {
		n.TargetPeer = *DEWH.TargetPeer
	}
	return nil
}
