// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"math/big"

	"github.com/DEWH/go-DEWH/common"
	"github.com/DEWH/go-DEWH/common/hexutil"
	"github.com/DEWH/go-DEWH/common/math"
	"github.com/DEWH/go-DEWH/core/types"
)

var _ = (*btHeaderMarshaling)(nil)

func (b btHeader) MarshalJSON() ([]byte, error) {
	type btHeader struct {
		Bloom            types.Bloom
		Coinbase         common.Address
		MixHash          common.Hash
		Nonce            types.BlockNonce
		Number           *math.HexOrDEWHimal256
		Hash             common.Hash
		ParentHash       common.Hash
		ReceiptTrie      common.Hash
		StateRoot        common.Hash
		TransactionsTrie common.Hash
		UncleHash        common.Hash
		ExtraData        hexutil.Bytes
		Difficulty       *math.HexOrDEWHimal256
		GasLimit         math.HexOrDEWHimal64
		GasUsed          math.HexOrDEWHimal64
		Timestamp        *math.HexOrDEWHimal256
	}
	var enc btHeader
	enc.Bloom = b.Bloom
	enc.Coinbase = b.Coinbase
	enc.MixHash = b.MixHash
	enc.Nonce = b.Nonce
	enc.Number = (*math.HexOrDEWHimal256)(b.Number)
	enc.Hash = b.Hash
	enc.ParentHash = b.ParentHash
	enc.ReceiptTrie = b.ReceiptTrie
	enc.StateRoot = b.StateRoot
	enc.TransactionsTrie = b.TransactionsTrie
	enc.UncleHash = b.UncleHash
	enc.ExtraData = b.ExtraData
	enc.Difficulty = (*math.HexOrDEWHimal256)(b.Difficulty)
	enc.GasLimit = math.HexOrDEWHimal64(b.GasLimit)
	enc.GasUsed = math.HexOrDEWHimal64(b.GasUsed)
	enc.Timestamp = (*math.HexOrDEWHimal256)(b.Timestamp)
	return json.Marshal(&enc)
}

func (b *btHeader) UnmarshalJSON(input []byte) error {
	type btHeader struct {
		Bloom            *types.Bloom
		Coinbase         *common.Address
		MixHash          *common.Hash
		Nonce            *types.BlockNonce
		Number           *math.HexOrDEWHimal256
		Hash             *common.Hash
		ParentHash       *common.Hash
		ReceiptTrie      *common.Hash
		StateRoot        *common.Hash
		TransactionsTrie *common.Hash
		UncleHash        *common.Hash
		ExtraData        *hexutil.Bytes
		Difficulty       *math.HexOrDEWHimal256
		GasLimit         *math.HexOrDEWHimal64
		GasUsed          *math.HexOrDEWHimal64
		Timestamp        *math.HexOrDEWHimal256
	}
	var DEWH btHeader
	if err := json.Unmarshal(input, &DEWH); err != nil {
		return err
	}
	if DEWH.Bloom != nil {
		b.Bloom = *DEWH.Bloom
	}
	if DEWH.Coinbase != nil {
		b.Coinbase = *DEWH.Coinbase
	}
	if DEWH.MixHash != nil {
		b.MixHash = *DEWH.MixHash
	}
	if DEWH.Nonce != nil {
		b.Nonce = *DEWH.Nonce
	}
	if DEWH.Number != nil {
		b.Number = (*big.Int)(DEWH.Number)
	}
	if DEWH.Hash != nil {
		b.Hash = *DEWH.Hash
	}
	if DEWH.ParentHash != nil {
		b.ParentHash = *DEWH.ParentHash
	}
	if DEWH.ReceiptTrie != nil {
		b.ReceiptTrie = *DEWH.ReceiptTrie
	}
	if DEWH.StateRoot != nil {
		b.StateRoot = *DEWH.StateRoot
	}
	if DEWH.TransactionsTrie != nil {
		b.TransactionsTrie = *DEWH.TransactionsTrie
	}
	if DEWH.UncleHash != nil {
		b.UncleHash = *DEWH.UncleHash
	}
	if DEWH.ExtraData != nil {
		b.ExtraData = *DEWH.ExtraData
	}
	if DEWH.Difficulty != nil {
		b.Difficulty = (*big.Int)(DEWH.Difficulty)
	}
	if DEWH.GasLimit != nil {
		b.GasLimit = uint64(*DEWH.GasLimit)
	}
	if DEWH.GasUsed != nil {
		b.GasUsed = uint64(*DEWH.GasUsed)
	}
	if DEWH.Timestamp != nil {
		b.Timestamp = (*big.Int)(DEWH.Timestamp)
	}
	return nil
}
