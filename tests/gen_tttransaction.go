// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/DEWH/go-DEWH/common"
	"github.com/DEWH/go-DEWH/common/hexutil"
	"github.com/DEWH/go-DEWH/common/math"
)

var _ = (*ttTransactionMarshaling)(nil)

func (t ttTransaction) MarshalJSON() ([]byte, error) {
	type ttTransaction struct {
		Data     hexutil.Bytes         `gencoDEWH:"required"`
		GasLimit math.HexOrDEWHimal64   `gencoDEWH:"required"`
		GasPrice *math.HexOrDEWHimal256 `gencoDEWH:"required"`
		Nonce    math.HexOrDEWHimal64   `gencoDEWH:"required"`
		Value    *math.HexOrDEWHimal256 `gencoDEWH:"required"`
		R        *math.HexOrDEWHimal256 `gencoDEWH:"required"`
		S        *math.HexOrDEWHimal256 `gencoDEWH:"required"`
		V        *math.HexOrDEWHimal256 `gencoDEWH:"required"`
		To       common.Address        `gencoDEWH:"required"`
	}
	var enc ttTransaction
	enc.Data = t.Data
	enc.GasLimit = math.HexOrDEWHimal64(t.GasLimit)
	enc.GasPrice = (*math.HexOrDEWHimal256)(t.GasPrice)
	enc.Nonce = math.HexOrDEWHimal64(t.Nonce)
	enc.Value = (*math.HexOrDEWHimal256)(t.Value)
	enc.R = (*math.HexOrDEWHimal256)(t.R)
	enc.S = (*math.HexOrDEWHimal256)(t.S)
	enc.V = (*math.HexOrDEWHimal256)(t.V)
	enc.To = t.To
	return json.Marshal(&enc)
}

func (t *ttTransaction) UnmarshalJSON(input []byte) error {
	type ttTransaction struct {
		Data     *hexutil.Bytes        `gencoDEWH:"required"`
		GasLimit *math.HexOrDEWHimal64  `gencoDEWH:"required"`
		GasPrice *math.HexOrDEWHimal256 `gencoDEWH:"required"`
		Nonce    *math.HexOrDEWHimal64  `gencoDEWH:"required"`
		Value    *math.HexOrDEWHimal256 `gencoDEWH:"required"`
		R        *math.HexOrDEWHimal256 `gencoDEWH:"required"`
		S        *math.HexOrDEWHimal256 `gencoDEWH:"required"`
		V        *math.HexOrDEWHimal256 `gencoDEWH:"required"`
		To       *common.Address       `gencoDEWH:"required"`
	}
	var DEWH ttTransaction
	if err := json.Unmarshal(input, &DEWH); err != nil {
		return err
	}
	if DEWH.Data == nil {
		return errors.New("missing required field 'data' for ttTransaction")
	}
	t.Data = *DEWH.Data
	if DEWH.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for ttTransaction")
	}
	t.GasLimit = uint64(*DEWH.GasLimit)
	if DEWH.GasPrice == nil {
		return errors.New("missing required field 'gasPrice' for ttTransaction")
	}
	t.GasPrice = (*big.Int)(DEWH.GasPrice)
	if DEWH.Nonce == nil {
		return errors.New("missing required field 'nonce' for ttTransaction")
	}
	t.Nonce = uint64(*DEWH.Nonce)
	if DEWH.Value == nil {
		return errors.New("missing required field 'value' for ttTransaction")
	}
	t.Value = (*big.Int)(DEWH.Value)
	if DEWH.R == nil {
		return errors.New("missing required field 'r' for ttTransaction")
	}
	t.R = (*big.Int)(DEWH.R)
	if DEWH.S == nil {
		return errors.New("missing required field 's' for ttTransaction")
	}
	t.S = (*big.Int)(DEWH.S)
	if DEWH.V == nil {
		return errors.New("missing required field 'v' for ttTransaction")
	}
	t.V = (*big.Int)(DEWH.V)
	if DEWH.To == nil {
		return errors.New("missing required field 'to' for ttTransaction")
	}
	t.To = *DEWH.To
	return nil
}
