// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/DEWH/go-DEWH/common"
	"github.com/DEWH/go-DEWH/common/hexutil"
	"github.com/DEWH/go-DEWH/common/math"
)

var _ = (*vmExecMarshaling)(nil)

func (v vmExec) MarshalJSON() ([]byte, error) {
	type vmExec struct {
		Address  common.UnprefixedAddress `json:"address"  gencoDEWH:"required"`
		Caller   common.UnprefixedAddress `json:"caller"   gencoDEWH:"required"`
		Origin   common.UnprefixedAddress `json:"origin"   gencoDEWH:"required"`
		Code     hexutil.Bytes            `json:"code"     gencoDEWH:"required"`
		Data     hexutil.Bytes            `json:"data"     gencoDEWH:"required"`
		Value    *math.HexOrDEWHimal256    `json:"value"    gencoDEWH:"required"`
		GasLimit math.HexOrDEWHimal64      `json:"gas"      gencoDEWH:"required"`
		GasPrice *math.HexOrDEWHimal256    `json:"gasPrice" gencoDEWH:"required"`
	}
	var enc vmExec
	enc.Address = common.UnprefixedAddress(v.Address)
	enc.Caller = common.UnprefixedAddress(v.Caller)
	enc.Origin = common.UnprefixedAddress(v.Origin)
	enc.Code = v.Code
	enc.Data = v.Data
	enc.Value = (*math.HexOrDEWHimal256)(v.Value)
	enc.GasLimit = math.HexOrDEWHimal64(v.GasLimit)
	enc.GasPrice = (*math.HexOrDEWHimal256)(v.GasPrice)
	return json.Marshal(&enc)
}

func (v *vmExec) UnmarshalJSON(input []byte) error {
	type vmExec struct {
		Address  *common.UnprefixedAddress `json:"address"  gencoDEWH:"required"`
		Caller   *common.UnprefixedAddress `json:"caller"   gencoDEWH:"required"`
		Origin   *common.UnprefixedAddress `json:"origin"   gencoDEWH:"required"`
		Code     *hexutil.Bytes            `json:"code"     gencoDEWH:"required"`
		Data     *hexutil.Bytes            `json:"data"     gencoDEWH:"required"`
		Value    *math.HexOrDEWHimal256     `json:"value"    gencoDEWH:"required"`
		GasLimit *math.HexOrDEWHimal64      `json:"gas"      gencoDEWH:"required"`
		GasPrice *math.HexOrDEWHimal256     `json:"gasPrice" gencoDEWH:"required"`
	}
	var DEWH vmExec
	if err := json.Unmarshal(input, &DEWH); err != nil {
		return err
	}
	if DEWH.Address == nil {
		return errors.New("missing required field 'address' for vmExec")
	}
	v.Address = common.Address(*DEWH.Address)
	if DEWH.Caller == nil {
		return errors.New("missing required field 'caller' for vmExec")
	}
	v.Caller = common.Address(*DEWH.Caller)
	if DEWH.Origin == nil {
		return errors.New("missing required field 'origin' for vmExec")
	}
	v.Origin = common.Address(*DEWH.Origin)
	if DEWH.Code == nil {
		return errors.New("missing required field 'code' for vmExec")
	}
	v.Code = *DEWH.Code
	if DEWH.Data == nil {
		return errors.New("missing required field 'data' for vmExec")
	}
	v.Data = *DEWH.Data
	if DEWH.Value == nil {
		return errors.New("missing required field 'value' for vmExec")
	}
	v.Value = (*big.Int)(DEWH.Value)
	if DEWH.GasLimit == nil {
		return errors.New("missing required field 'gas' for vmExec")
	}
	v.GasLimit = uint64(*DEWH.GasLimit)
	if DEWH.GasPrice == nil {
		return errors.New("missing required field 'gasPrice' for vmExec")
	}
	v.GasPrice = (*big.Int)(DEWH.GasPrice)
	return nil
}
