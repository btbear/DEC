// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/DEWH/go-DEWH/common"
	"github.com/DEWH/go-DEWH/common/math"
)

var _ = (*stEnvMarshaling)(nil)

func (s stEnv) MarshalJSON() ([]byte, error) {
	type stEnv struct {
		Coinbase   common.UnprefixedAddress `json:"currentCoinbase"   gencoDEWH:"required"`
		Difficulty *math.HexOrDEWHimal256    `json:"currentDifficulty" gencoDEWH:"required"`
		GasLimit   math.HexOrDEWHimal64      `json:"currentGasLimit"   gencoDEWH:"required"`
		Number     math.HexOrDEWHimal64      `json:"currentNumber"     gencoDEWH:"required"`
		Timestamp  math.HexOrDEWHimal64      `json:"currentTimestamp"  gencoDEWH:"required"`
	}
	var enc stEnv
	enc.Coinbase = common.UnprefixedAddress(s.Coinbase)
	enc.Difficulty = (*math.HexOrDEWHimal256)(s.Difficulty)
	enc.GasLimit = math.HexOrDEWHimal64(s.GasLimit)
	enc.Number = math.HexOrDEWHimal64(s.Number)
	enc.Timestamp = math.HexOrDEWHimal64(s.Timestamp)
	return json.Marshal(&enc)
}

func (s *stEnv) UnmarshalJSON(input []byte) error {
	type stEnv struct {
		Coinbase   *common.UnprefixedAddress `json:"currentCoinbase"   gencoDEWH:"required"`
		Difficulty *math.HexOrDEWHimal256     `json:"currentDifficulty" gencoDEWH:"required"`
		GasLimit   *math.HexOrDEWHimal64      `json:"currentGasLimit"   gencoDEWH:"required"`
		Number     *math.HexOrDEWHimal64      `json:"currentNumber"     gencoDEWH:"required"`
		Timestamp  *math.HexOrDEWHimal64      `json:"currentTimestamp"  gencoDEWH:"required"`
	}
	var DEWH stEnv
	if err := json.Unmarshal(input, &DEWH); err != nil {
		return err
	}
	if DEWH.Coinbase == nil {
		return errors.New("missing required field 'currentCoinbase' for stEnv")
	}
	s.Coinbase = common.Address(*DEWH.Coinbase)
	if DEWH.Difficulty == nil {
		return errors.New("missing required field 'currentDifficulty' for stEnv")
	}
	s.Difficulty = (*big.Int)(DEWH.Difficulty)
	if DEWH.GasLimit == nil {
		return errors.New("missing required field 'currentGasLimit' for stEnv")
	}
	s.GasLimit = uint64(*DEWH.GasLimit)
	if DEWH.Number == nil {
		return errors.New("missing required field 'currentNumber' for stEnv")
	}
	s.Number = uint64(*DEWH.Number)
	if DEWH.Timestamp == nil {
		return errors.New("missing required field 'currentTimestamp' for stEnv")
	}
	s.Timestamp = uint64(*DEWH.Timestamp)
	return nil
}
