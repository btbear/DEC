// Code generated by github.com/fjl/gencoDEWH. DO NOT EDIT.

package tests

import (
	"encoding/json"
	"math/big"

	"github.com/DEWH/go-DEWH/common/hexutil"
	"github.com/DEWH/go-DEWH/common/math"
)

var _ = (*stTransactionMarshaling)(nil)

func (s stTransaction) MarshalJSON() ([]byte, error) {
	type stTransaction struct {
		GasPrice   *math.HexOrDEWHimal256 `json:"gasPrice"`
		Nonce      math.HexOrDEWHimal64   `json:"nonce"`
		To         string                `json:"to"`
		Data       []string              `json:"data"`
		GasLimit   []math.HexOrDEWHimal64 `json:"gasLimit"`
		Value      []string              `json:"value"`
		PrivateKey hexutil.Bytes         `json:"secretKey"`
	}
	var enc stTransaction
	enc.GasPrice = (*math.HexOrDEWHimal256)(s.GasPrice)
	enc.Nonce = math.HexOrDEWHimal64(s.Nonce)
	enc.To = s.To
	enc.Data = s.Data
	if s.GasLimit != nil {
		enc.GasLimit = make([]math.HexOrDEWHimal64, len(s.GasLimit))
		for k, v := range s.GasLimit {
			enc.GasLimit[k] = math.HexOrDEWHimal64(v)
		}
	}
	enc.Value = s.Value
	enc.PrivateKey = s.PrivateKey
	return json.Marshal(&enc)
}

func (s *stTransaction) UnmarshalJSON(input []byte) error {
	type stTransaction struct {
		GasPrice   *math.HexOrDEWHimal256 `json:"gasPrice"`
		Nonce      *math.HexOrDEWHimal64  `json:"nonce"`
		To         *string               `json:"to"`
		Data       []string              `json:"data"`
		GasLimit   []math.HexOrDEWHimal64 `json:"gasLimit"`
		Value      []string              `json:"value"`
		PrivateKey *hexutil.Bytes        `json:"secretKey"`
	}
	var DEWH stTransaction
	if err := json.Unmarshal(input, &DEWH); err != nil {
		return err
	}
	if DEWH.GasPrice != nil {
		s.GasPrice = (*big.Int)(DEWH.GasPrice)
	}
	if DEWH.Nonce != nil {
		s.Nonce = uint64(*DEWH.Nonce)
	}
	if DEWH.To != nil {
		s.To = *DEWH.To
	}
	if DEWH.Data != nil {
		s.Data = DEWH.Data
	}
	if DEWH.GasLimit != nil {
		s.GasLimit = make([]uint64, len(DEWH.GasLimit))
		for k, v := range DEWH.GasLimit {
			s.GasLimit[k] = uint64(v)
		}
	}
	if DEWH.Value != nil {
		s.Value = DEWH.Value
	}
	if DEWH.PrivateKey != nil {
		s.PrivateKey = *DEWH.PrivateKey
	}
	return nil
}
